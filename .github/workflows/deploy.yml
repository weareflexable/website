# name: "Deploy to EKS"
# on:
#   push:
#     branches: [main]

# jobs:
#   build:
#     name: Build Image and deploy to EKS
#     runs-on: ubuntu-latest
     
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-2

#       - name: Login to Amazon ECR
#         id: login-ecr-public
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Skaffold deploy
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#           AWS_DEFAULT_REGION: us-east-2
#         run: |
#           echo "$ENV_FILE" | base64 -d > .env
#           curl -LO "https://dl.k8s.io/release/v1.24.3/bin/linux/amd64/kubectl"
#           curl -LO "https://dl.k8s.io/v1.24.3/bin/linux/amd64/kubectl.sha256"
#           echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
#           sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
#           kubectl version --client
#           mkdir -p ~/.kube
#           echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config
#           curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
#           sudo install skaffold /usr/local/bin/
#           skaffold run

name: Publish to GitHub Pages

on:
  push:
    branches: ["main"]

env:
  NODE_AUTH_TOKEN: ${{ secrets.PAGES_DEPLOYMENT }}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
      - name: Detect package manager 👻
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node 🍉
        uses: actions/setup-node@v3
        with:
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          node-version: '16.10.0'

      - name: Setup Pages 🔧
        id: pages
        uses: actions/configure-pages@v1
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache 💾
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies 🥑
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js 🍄
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Static HTML export with Next.js 🥯
        run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Upload artifact ⛱️
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v1